{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Swift on Amazon web service template",

  "Parameters" : {
 
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Default" : "cloudy",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    
    "InstanceType" : {
      "Description" : "Instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    
    "KeystoneMysqlRootPassword": {
      "Default": "WSORa6xTu2",
      "Description" : "Keystone's MySQL root password",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },
    
    "KeystoneMysqlUserPassword": {
      "Default": "IWur6lc2CQ",
      "Description" : "Keystone's MySQL user password",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },
      
    "KeystoneSwiftUserPassword": {
      "Default": "icXyuCaywR",
      "Description" : "Keystone swift user password",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },
      
    "KeystoneAdminToken": {
      "Default": "E5VfT9rgAc",
      "Description" : "Keystone admin token",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },  
    
    "SwiftHashPathPrefix": {
      "Default": "3e3f6364f0d7f06cf8dc50430c3cb4ef",
      "Description" : "Swift Hash Prefix",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alpha characters."
    },
    
    "SwiftNodeDiskSize": {
      "Default": "1",
      "Description" : "Size of dedicated disk for swift (Go)",
      "Type": "String"
    },

    "SwiftNodeNumber": {
      "Default": "3",
      "Description" : "Number of Swift nodes. One zone is created per node.",
      "Type": "String"
    },
    
    "SSHpublicKeyURL": {
      "Default": "https://s3-ap-southeast-1.amazonaws.com/osonaws/id_dsa.pub",
      "Description" : "A public key. Can be yours",
      "Type": "String"
    },
    
    "SSHprivateKeyURL": {
      "Default": "https://s3-ap-southeast-1.amazonaws.com/osonaws/id_dsa",
      "Description" : "A private key. Can be yours",
      "Type": "String"
    }
  },

  "Mappings" : {

    "AWSRegionMap" : {
        "us-east-1"      : { "AMI" : "ami-3d4ff254", "AZ" : "us-east-1a" },
        "us-west-1"      : { "AMI" : "ami-0d153248", "AZ" : "us-west-1a" },
        "us-west-2"      : { "AMI" : "ami-8e109ebe", "AZ" : "us-west-2a" },
        "eu-west-1"      : { "AMI" : "ami-c1aaabb5", "AZ" : "eu-west-1a" },
        "sa-east-1"      : { "AMI" : "ami-c819c0d5", "AZ" : "sa-east-1a" },
        "ap-southeast-1" : { "AMI" : "ami-acf6b0fe", "AZ" : "ap-southeast-1a" },
        "ap-northeast-1" : { "AMI" : "ami-22ad1223", "AZ" : "ap-northeast-1a" },
        "ap-southeast-2" : { "AMI" : "ami-fb8611c1", "AZ" : "ap-southeast-2a" }
      }
  },

  "Resources" : {

  "OpenStackUser" : {
    "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path": "/",
          "Policies": [{
            "PolicyName": "DefaultStack",
            "PolicyDocument": {
            "Statement": [
            {
              "Sid": "CloudformationPolicy",
              "Effect":"Allow",
              "Action":"cloudformation:DescribeStackResource",
              "Resource":"*"
            },
            {
              "Sid": "CloudWatchPolicy",
              "Effect"   : "Allow",
              "Action"   : "cloudwatch:PutMetricData",
              "Resource" : "*"
            },
            {
              "Sid": "DescribeInstances",
              "Effect": "Allow",
              "Action": "ec2:DescribeInstances",
              "Resource": "*"
            }]
          }
        }]
      }
    },

    "OpenStackUserAccessKey" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : {"Ref": "OpenStackUser"}
      }
    },    
    
    "OpenStackSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Need to reconfigure this security group.",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    },
    
    "KeystoneWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    
    "KeystoneWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "KeystoneServer",
      "Properties" : {
        "Handle" : {"Ref" : "KeystoneWaitHandle"},
        "Timeout" : "1200"
      }
    },      
    
    "KeystoneIPAddress" : {
      "Type" : "AWS::EC2::EIP"
    },

    "KeystoneIPAssoc" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "InstanceId" : { "Ref" : "KeystoneServer" },
        "EIP" : { "Ref" : "KeystoneIPAddress" }
      }
    },
    
    "KeystoneServer": {
        "Type": "AWS::EC2::Instance",
          "Metadata" : {
            "AWS::CloudFormation::Init" : {
              "configSets" : {
                "fullinstall" : [ "setup_seed", "setup_database", "setup_keystone" ]
               },
              "setup_seed" : {
                "files" : {
                  "/opt/osonaws/tmp/all.preseed" : {
                    "content" : { "Fn::Join" : ["", [
                      "mysql-server mysql-server/root_password password ", { "Ref" : "KeystoneMysqlRootPassword" }, "\n",
                      "mysql-server mysql-server/root_password_again password ", { "Ref" : "KeystoneMysqlRootPassword" }, "\n",
                      "mysql-server mysql-server/start_on_boot boolean true\n"
                    ]]},
                    "mode"  : "000600",
                    "owner" : "ubuntu",
                    "group" : "ubuntu"
                  },
                  "/opt/osonaws/tmp/setup_seed" : {
                    "content" : { "Fn::Join" : ["", [
                      "#!/bin/bash -v\n",
                      "debconf-set-selections < /opt/osonaws/tmp/all.preseed\n"
                    ]]},
                    "mode"  : "000700",
                    "owner" : "ubuntu",
                    "group" : "ubuntu"
                  }
                },
                "commands" : {
                  "01_seed" : {
                    "command" : "/opt/osonaws/tmp/setup_seed"
                  }
                }
              },
              "setup_database" : {
                "packages" : {
                  "apt" : {
                    "mysql-server"            : []
                  }
                },
                "files" : {
                  "/opt/osonaws/setup.mysql" : {
                    "content" : { "Fn::Join" : ["", [
                      "CREATE DATABASE keystone;\n",
                      "GRANT ALL ON keystone.* TO 'keystone'@'%' IDENTIFIED BY '", { "Ref" : "KeystoneMysqlUserPassword" }, "';\n",
                      "GRANT ALL ON keystone.* TO 'keystone'@'localhost' IDENTIFIED BY '", { "Ref" : "KeystoneMysqlUserPassword" }, "';\n"
                    ]]},
                    "mode"  : "000600",
                    "owner" : "ubuntu",
                    "group" : "ubuntu"
                  },
                  "/opt/osonaws/setup_database" : {
                    "content" : { "Fn::Join" : ["", [
                      "#!/bin/bash -v\n",
                      "mysql -u root --password='", { "Ref" : "KeystoneMysqlRootPassword" }, "' < /opt/osonaws/setup.mysql\n"
                    ]]},
                    "mode"  : "000700",
                    "owner" : "ubuntu",
                    "group" : "ubuntu"
                  }
                },
                "commands" : {
                  "01_setup_database" : {
                    "command" : "/opt/osonaws/setup_database"
                  }
                }
              },
              "setup_keystone" : {
                "packages" : {
                  "apt" : {
                    "keystone"                 : [],
                    "python-mysqldb"           : [],
                    "python-keystoneclient"    : []
                  }
                },
                "files" : {
                  "/opt/osonaws/setup_keystone" : {
                    "content" : { "Fn::Join" : ["", [
                      "#!/bin/bash -v\n",
                      "rm /var/lib/keystone/keystone.db\n",
                      "sed -i 's/127.0.0.1/0.0.0.0/g' /etc/mysql/my.cnf\n",
                      "sed -i \"s/sqlite:\\/\\/\\/\\/var\\/lib\\/keystone\\/keystone.db\/mysql:\\/\\/keystone:", { "Ref" : "KeystoneMysqlUserPassword" }, "@0.0.0.0\\/keystone\/g\" /etc/keystone/keystone.conf\n",
                      "sed -i \"s/# admin_token = ADMIN/admin_token = ", { "Ref" : "KeystoneAdminToken" }, "/g\" /etc/keystone/keystone.conf\n",
                      "sed -i \"s/# bind_host/bind_host/g\" /etc/keystone/keystone.conf\n",
                      "sed -i \"s/# public_port/public_port/g\" /etc/keystone/keystone.conf\n",
                      "sed -i \"s/# public_port/public_port/g\" /etc/keystone/keystone.conf\n",
                      "sed -i \"s/# compute_port/compute_port/g\" /etc/keystone/keystone.conf\n",
                      "service mysql restart\n",
                      "service keystone restart\n",
                      "keystone-manage db_sync\n"
                    ]]},
                    "mode"  : "000700",
                    "owner" : "ubuntu",
                    "group" : "ubuntu"
                  },
                  "/opt/osonaws/setup_keystone_data" : {
                    "content" : { "Fn::Join" : ["", [
                      "#!/bin/bash -v\n",        
                      "function get_id () {\n",
                      " echo `\"$@\" | awk '/ id / { print $4 }'`\n",
                      "}\n",

                      "SERVICE_TENANT_NAME=${SERVICE_TENANT_NAME:-service}\n",
                      "SERVICE_HOST='127.0.0.1'\n",
                      "export SERVICE_TOKEN='", { "Ref" : "KeystoneAdminToken" }, "'\n",
                      "export SERVICE_ENDPOINT='http://0.0.0.0:35357/v2.0'\n",
                      
                      "SERVICE_TENANT=$(get_id keystone tenant-create --name=\"$SERVICE_TENANT_NAME\")\n",
                      "ADMIN_ROLE=$(get_id keystone role-create --name=admin)\n",
                      
                      "#Swift user and endpoint\n",
                      "SWIFT_USER=$(get_id keystone user-create --name=swift --pass=\"", { "Ref" : "KeystoneSwiftUserPassword" }, "\" --tenant-id $SERVICE_TENANT --email=swift@example.com)\n",
                      "keystone user-role-add --tenant-id $SERVICE_TENANT --user-id $SWIFT_USER --role-id $ADMIN_ROLE\n",
                      "SWIFT_SERVICE=$(get_id keystone service-create --name=swift --type=\"object-store\" --description=\"Swift Service\")\n",
                      "keystone endpoint-create --region RegionOne --service-id $SWIFT_SERVICE --publicurl \"http:\/\/", { "Ref" : "SwiftProxyIPAddress" }, ":8080\/v1\/AUTH_%(tenant_id)s\" --adminurl \"http:\/\/", { "Ref" : "SwiftProxyIPAddress" }, ":8080\" --internalurl \"http:\/\/", { "Ref" : "SwiftProxyIPAddress" }, ":8080\/v1\/AUTH_%(tenant_id)s\"\n"

                    ]]},
                    "mode"  : "000700",
                    "owner" : "ubuntu",
                    "group" : "ubuntu"
                  }
                },
                "commands" : {
                  "01_setup_keystone" : {
                    "command" : "/opt/osonaws/setup_keystone"
                  },
                  "02_setup_keystone_data" : {
                    "command" : "/opt/osonaws/setup_keystone_data"
                  }
                }
              }
            }
          },
          "Properties" : {
            "KeyName" : { "Ref" : "KeyName" },
            "InstanceType": { "Ref": "InstanceType" },
            "ImageId" : { "Fn::FindInMap" : [ "AWSRegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
            "SecurityGroups" : [ {"Ref" : "OpenStackSecurityGroup"} ],
            "Monitoring" : "false",
            "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
               "#! /bin/bash\n",
               "# -- Update\n",
               "apt-get install ubuntu-cloud-keyring\n",
               "echo 'deb http://ubuntu-cloud.archive.canonical.com/ubuntu precise-updates/folsom main' >  /etc/apt/sources.list.d/cloud-archive.list\n",
               "echo 'APT::Get::AllowUnauthenticated \"true\";' >> /etc/apt/apt.conf.d/70debconf\n",
               "apt-get update\n",
               "apt-get -y install python-setuptools\n",
               "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.1.tar.gz\n",    
               "function error_exit\n",
               "{\n",
               "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "KeystoneWaitHandle" }, "'\n",
               "  exit 1\n",
               "}\n",
               "cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r KeystoneServer ",
               "    --access-key ",  { "Ref" : "OpenStackUserAccessKey" },
               "    --secret-key ", {"Fn::GetAtt": ["OpenStackUserAccessKey", "SecretAccessKey"]},
               "    --region ", { "Ref" : "AWS::Region" }, 
               "    --configset fullinstall > /tmp/ok.init 2>/tmp/fail.init\n",
               "# All is well so signal success\n",
               "cfn-signal -e 0 -r \"Keystone setup complete\" '", { "Ref" : "KeystoneWaitHandle" }, "'\n"
          ]]}
        }
      }
    },
    
    "SwiftNodeWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    
    "SwiftNodeWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "SwiftNodesGroup",
      "Properties" : {
        "Handle" : {"Ref" : "SwiftNodeWaitHandle"},
        "Timeout" : "1200"
      }
    },        
    
    "SwiftNodesGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "LaunchConfigurationName" : { "Ref" : "SwiftNodeServer" },
        "MinSize" : "3",
        "MaxSize" : "10",
        "DesiredCapacity" : { "Ref" : "SwiftNodeNumber" }
      }
    },
    
    "SwiftNodeServer": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
        "Metadata" : {
          "AWS::CloudFormation::Init" : {
            "configSets" : {
              "fullinstall" : [ "setup_swiftnode" ]
            },
            "setup_swiftnode" : {
              "packages" : {
                "apt" : {
                  "swift"            : [],
                  "openssh-server"   : [],
                  "python-xattr"     : [],
                  "python-memcache"  : [],
                  "swift-account"    : [],
                  "swift-container"  : [],
                  "swift-object"     : [],
                  "xfsprogs"         : []
                }
              },
              "files" : {
                "/etc/swift/swift.conf" : {
                  "content" : { "Fn::Join" : ["", [
                    "[swift-hash]\n",
                    "swift_hash_path_suffix = ", { "Ref" : "SwiftHashPathPrefix" }, "\n"
                  ]]},
                  "mode"  : "000700",
                  "owner" : "swift",
                  "group" : "swift"
                },
                "/etc/rsyncd.conf" : {
                  "content" : { "Fn::Join" : ["", [
                    "uid = swift\n",
                    "gid = swift\n",
                    "log file = /var/log/rsyncd.log\n",
                    "pid file = /var/run/rsyncd.pid\n",
                    "address = 0.0.0.0\n",
                    "\n",
                    "[account]\n",
                    "max connections = 2\n",
                    "path = /srv/node/\n",
                    "read only = false\n",
                    "lock file = /var/lock/account.lock\n",
                    "\n",
                    "[container]\n",
                    "max connections = 2\n",
                    "path = /srv/node/\n",
                    "read only = false\n",
                    "lock file = /var/lock/container.lock\n",
                    "\n",
                    "[object]\n",
                    "max connections = 2\n",
                    "path = /srv/node/\n",
                    "read only = false\n",
                    "lock file = /var/lock/object.lock\n"
                  ]]},
                  "mode"  : "000700",
                  "owner" : "ubuntu",
                  "group" : "ubuntu"
                },
                "/etc/swift/account-server.conf" : {
                  "content" : { "Fn::Join" : ["", [
                    "[DEFAULT]\n",
                    "bind_ip = 0.0.0.0\n",
                    "workers = 2\n",
                    "\n",
                    "[pipeline:main]\n",
                    "pipeline = account-server\n",
                    "\n",
                    "[app:account-server]\n",
                    "use = egg:swift#account\n",
                    "\n",
                    "[account-replicator]\n",
                    "\n",
                    "[account-auditor]\n",
                    "\n",
                    "[account-reaper]\n",
                    "\n"
                  ]]},
                  "mode"  : "000700",
                  "owner" : "swift",
                  "group" : "swift"
                },
                "/etc/swift/container-server.conf" : {
                  "content" : { "Fn::Join" : ["", [
                    "[DEFAULT]\n",
                    "bind_ip = 0.0.0.0\n",
                    "workers = 2\n",
                    "\n",
                    "[pipeline:main]\n",
                    "pipeline = container-server\n",
                    "\n",
                    "[app:container-server]\n",
                    "use = egg:swift#container\n",
                    "\n",
                    "[container-replicator]\n",
                    "\n",
                    "[container-updater]\n",
                    "\n",
                    "[container-auditor]\n",
                    "\n",
                    "[container-sync]\n",
                    "\n"
                  ]]},
                  "mode"  : "000700",
                  "owner" : "swift",
                  "group" : "swift"
                },
                "/etc/swift/object-server.conf" : {
                  "content" : { "Fn::Join" : ["", [
                    "[DEFAULT]\n",
                    "bind_ip = 0.0.0.0\n",
                    "workers = 2\n",
                    "\n",
                    "[pipeline:main]\n",
                    "pipeline = object-server\n",
                    "\n",
                    "[app:object-server]\n",
                    "use = egg:swift#object\n",
                    "\n",
                    "[object-replicator]\n",
                    "\n",
                    "[object-updater]\n",
                    "\n",
                    "[object-auditor]\n",
                    "\n",
                    "[object-expirer]\n",
                    "\n"
                  ]]},
                  "mode"  : "000700",
                  "owner" : "swift",
                  "group" : "swift"
                },                  
                "/opt/osonaws/setup_swiftnode" : {
                  "content" : { "Fn::Join" : ["", [
                    "#!/bin/bash -v\n",
                    "wget ", { "Ref" : "SSHpublicKeyURL" }, "\n",
                    "cat ./id_dsa.pub >> /home/ubuntu/.ssh/authorized_keys\n",
                    
                    "mkdir -p /etc/swift\n",
                    "chown -R swift:swift /etc/swift/\n",
                    
                    "mkfs.xfs -i size=1024 /dev/xvdb\n",
                    "echo '/dev/xvdb /srv/node/xvdb xfs noatime,nodiratime,nobarrier,logbufs=8 0 0' >> /etc/fstab\n",
                    "mkdir -p /srv/node/xvdb\n",
                    "mount /srv/node/xvdb\n",
                    "chown -R swift:swift /srv/node\n",
                    
                    "sed -i 's/RSYNC_ENABLE=false/RSYNC_ENABLE=true/g' /etc/default/rsync\n",
                    
                    "service rsync start\n",
                    "swift-init object-server start\n",
                    "swift-init object-replicator start\n",
                    "swift-init object-updater start\n", 
                    "swift-init object-auditor start\n",
                    "swift-init container-server start\n",
                    "swift-init container-replicator start\n",
                    "swift-init container-updater start\n",
                    "swift-init container-auditor start\n",
                    "swift-init account-server start\n",
                    "swift-init account-replicator start\n",
                    "swift-init account-auditor start\n"
                  ]]},
                  "mode"  : "000700",
                  "owner" : "ubuntu",
                  "group" : "ubuntu"
                }
              },
              "commands" : {
                "01_seed" : {
                  "command" : "/opt/osonaws/setup_swiftnode"
              }
            }
          }
        }
      },
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "InstanceType": { "Ref": "InstanceType" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "SecurityGroups" : [ {"Ref" : "OpenStackSecurityGroup"} ],
        "BlockDeviceMappings" : [{"DeviceName" : "/dev/sdb", "Ebs": { "VolumeSize": { "Ref" : "SwiftNodeDiskSize" }}}],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#! /bin/bash\n",
          "# -- Update\n",
          "apt-get update\n",
          "apt-get -y install python-setuptools\n",
          "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.1.tar.gz\n",    
          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "SwiftNodeWaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",
          "cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r SwiftNodeServer ",
          "    --access-key ",  { "Ref" : "OpenStackUserAccessKey" },
          "    --secret-key ", {"Fn::GetAtt": ["OpenStackUserAccessKey", "SecretAccessKey"]},
          "    --region ", { "Ref" : "AWS::Region" }, 
          "    --configset fullinstall > /tmp/ok.init 2>/tmp/fail.init\n",
          "# All is well so signal success\n",
          "cfn-signal -e 0 -r \"SwiftNode setup complete\" '", { "Ref" : "SwiftNodeWaitHandle" }, "'\n"
          ]]}
        }
      }    
    },

    "SwiftProxyWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    
    "SwiftProxyWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "SwiftProxyServer",
      "Properties" : {
        "Handle" : {"Ref" : "SwiftProxyWaitHandle"},
        "Timeout" : "1200"
      }
    },      

    "SwiftProxyIPAddress" : {
      "Type" : "AWS::EC2::EIP"
    },

    "SwiftProxyIPAssoc" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "InstanceId" : { "Ref" : "SwiftProxyServer" },
        "EIP" : { "Ref" : "SwiftProxyIPAddress" }
      }
    },
    
    "SwiftProxyServer": {
      "Type": "AWS::EC2::Instance",
        "Metadata" : {
          "AWS::CloudFormation::Init" : {
            "configSets" : {
              "fullinstall" : [ "setup_swiftproxy", "create_ring" ]
            },
            
            "create_ring" : {
              "packages" : {
                "apt" : {
                  "default-jre"        : [],
                  "unzip"              : []
                }
              },
              "sources" : {
                "/opt"            : "http://s3.amazonaws.com/ec2-downloads/ec2-api-tools.zip"
              },
              "files" : {
                "/opt/osonaws/create_ring" : {
                  "content" : { "Fn::Join" : ["", [
                    "#! /bin/bash\n",
                    "mv /opt/ec2-api-tools-* /opt/ec2-api-tools\n",
                    "export EC2_HOME=/opt/ec2-api-tools\n",
                    "export JAVA_HOME=/usr\n",
                    "export AWS_ACCESS_KEY=", {"Ref" : "OpenStackUserAccessKey"} , "\n",
                    "export AWS_SECRET_KEY=",  {"Fn::GetAtt" : ["OpenStackUserAccessKey", "SecretAccessKey"]}, "\n",
                    "export PATH=$PATH:$EC2_HOME/bin\n",
                    "chmod +x $EC2_HOME/bin/*\n",
                        
                    "SWIFT_NODES_IP=$(ec2-describe-instances --region ", { "Ref" : "AWS::Region" } ," | grep ", {"Ref" : "SwiftNodesGroup"} , " | cut -f 3)\n",
                    "ZONE=\"1\"\n",
                        
                    "cd /etc/swift\n",
                    "swift-ring-builder account.builder create 18 ", { "Ref" : "SwiftNodeNumber" } ," 1\n",
                    "swift-ring-builder container.builder create 18 ", { "Ref" : "SwiftNodeNumber" } ," 1\n",
                    "swift-ring-builder object.builder create 18 ", { "Ref" : "SwiftNodeNumber" } ," 1\n",
                    
                    "wget ", { "Ref" : "SSHprivateKeyURL" }, "\n",
                    "mv /etc/swift/id_dsa /home/ubuntu/.ssh/\n",
                    
                    "for instance in $SWIFT_NODES_IP\n",
                    "do\n",
                    "NODE_IP=$(ec2-describe-instances --region ", { "Ref" : "AWS::Region" } ," | grep $instance | grep INSTANCE | cut -f 18)\n",
                    "swift-ring-builder account.builder add z${ZONE}-${NODE_IP}:6002/xvdb 100\n",
                    "swift-ring-builder container.builder add z${ZONE}-${NODE_IP}:6001/xvdb 100\n",
                    "swift-ring-builder object.builder add z${ZONE}-${NODE_IP}:6000/xvdb 100\n",
                    "ZONE=$(($ZONE+1))\n",
                    "done\n",

                    "swift-ring-builder account.builder rebalance\n",
                    "swift-ring-builder container.builder rebalance\n",
                    "swift-ring-builder object.builder rebalance\n",
                    "swift-init proxy start\n",

                    "for instance in $SWIFT_NODES_IP\n",
                    "do\n",                   
                    "NODE_IP=$(ec2-describe-instances --region ", { "Ref" : "AWS::Region" } ," | grep $instance | grep INSTANCE | cut -f 18)\n",
                    "su ubuntu -c \"scp -oStrictHostKeyChecking=no /etc/swift/*.gz ubuntu@$NODE_IP:/home/ubuntu\"\n",
                    "su ubuntu -c \"ssh -oStrictHostKeyChecking=no ubuntu@$NODE_IP 'sudo mv /home/ubuntu/*.gz /etc/swift && sudo chown -R swift:swift /etc/swift'\"\n",
                    "su ubuntu -c \"ssh -oStrictHostKeyChecking=no ubuntu@$NODE_IP 'sudo swift-init main start; sudo swift-init rest start'\"\n",
                    "done\n",
      
                    "exit 0\n"
                  ]]},
                  "mode"  : "000700",
                  "owner" : "ubuntu",
                  "group" : "ubuntu"
                }
              },
              "commands" : {
                "01_create_ring" : {
                  "command" : "/opt/osonaws/create_ring"
                }
              }
            },
            
            "setup_swiftproxy" : {
              "packages" : {
                "apt" : {
                  "swift"               : [],
                  "openssh-server"      : [],
                  "python-keystone"     : [],
                  "python-xattr"        : [],
                  "python-memcache"     : [],
                  "swift-proxy"         : [],
                  "memcached"           : []
                }
              },
              "files" : {
                "/etc/swift/swift.conf" : {
                  "content" : { "Fn::Join" : ["", [
                    "[swift-hash]\n",
                    "swift_hash_path_suffix = ", { "Ref" : "SwiftHashPathPrefix" }, " \n"
                  ]]},
                  "mode"  : "000700",
                  "owner" : "swift",
                  "group" : "swift"
                },
                
                "/etc/swift/proxy-server.conf" : {
                  "content" : { "Fn::Join" : ["", [
                    "[DEFAULT]\n",
                    "bind_port = 8080\n",
                    "user = swift\n",
                    "[pipeline:main]\n",
                    "pipeline = healthcheck cache swift3 authtoken keystone proxy-server\n",
                    "[app:proxy-server]\n",
                    "use = egg:swift#proxy\n",
                    "allow_account_management = true\n",
                    "account_autocreate = true\n",
                    "[filter:keystone]\n",
                    "paste.filter_factory = keystone.middleware.swift_auth:filter_factory\n",
                    "operator_roles = Member,admin, swiftoperator\n",
                    "[filter:authtoken]\n",
                    "paste.filter_factory = keystone.middleware.auth_token:filter_factory\n",
                    "# Delaying the auth decision is required to support token-less\n",
                    "# usage for anonymous referrers ('.r:*').\n",
                    "delay_auth_decision = 10\n",
                    "service_port = 5000\n",
                    "service_host = ", { "Ref" : "KeystoneIPAddress" }, "\n",
                    "auth_port = 35357\n",
                    "auth_host = ", { "Ref" : "KeystoneIPAddress" }, "\n",
                    "auth_protocol = http\n",
                    "auth_uri = http://", { "Ref" : "KeystoneIPAddress" }, ":5000/\n",
                    "auth_token = ", { "Ref" : "KeystoneAdminToken" }, "\n",
                    "admin_token = ", { "Ref" : "KeystoneAdminToken" }, "\n",
                    "admin_tenant_name = service\n",
                    "admin_user = swift\n",
                    "admin_password = ", { "Ref" : "KeystoneSwiftUserPassword" }, "\n",
                    "[filter:cache]\n",
                    "use = egg:swift#memcache\n",
                    "set log_name = cache\n",
                    "[filter:catch_errors]\n",
                    "use = egg:swift#catch_errors\n",
                    "[filter:healthcheck]\n",
                    "use = egg:swift#healthcheck\n",
                    "[filter:swift3]\n",
                    "use = egg:swift#swift3\n"
                  ]]},
                  "mode"  : "000700",
                  "owner" : "swift",
                  "group" : "swift"
                }
              }
            }
          }
        },
        "Properties" : {
          "KeyName" : { "Ref" : "KeyName" },
          "InstanceType": { "Ref": "InstanceType" },
          "ImageId" : { "Fn::FindInMap" : [ "AWSRegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
          "SecurityGroups" : [ {"Ref" : "OpenStackSecurityGroup"} ],
          "Monitoring" : "false",
          "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#! /bin/bash\n",

          "# -- Update\n",
          "apt-get update\n",
          "apt-get -y install python-setuptools\n",
          "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.1.tar.gz\n",
                    
          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "SwiftProxyWaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",
          "cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r SwiftProxyServer ",
          "    --access-key ",  { "Ref" : "OpenStackUserAccessKey" },
          "    --secret-key ", {"Fn::GetAtt": ["OpenStackUserAccessKey", "SecretAccessKey"]},
          "    --region ", { "Ref" : "AWS::Region" }, 
          "    --configset fullinstall > /tmp/ok.init 2>/tmp/fail.init\n",
          "# All is well so signal success\n",
          "cfn-signal -e 0 -r \"SwiftProxy setup complete\" '", { "Ref" : "SwiftProxyWaitHandle" }, "'\n"
          ]]}
        }
      }
    }
  },

  "Outputs" : {
    "SwiftEndPoint" : {
      "Value" : { "Fn::Join" : ["", ["swift -V 2.0 -A http://", { "Ref" : "KeystoneIPAddress" }, ":5000/v2.0 -U service:swift -K ", { "Ref" : "KeystoneSwiftUserPassword" }, " stat" ]] },
      "Description" : "Command to execute to test the cluster with swift client."    
    }
  }
}